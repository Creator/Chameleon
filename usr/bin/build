--[[
 The MIT License (MIT)

 Copyright (c) 2014-2015 the TARDIX team

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE. ]]


local bs_env = {
  ["builders"] = {}
}
setmetatable(bs_env, {["__index"] = _G})

local builder = {}
setmetatable(builder, {["__index"] = builder})

function builder:addSource(src)
  if not self.sources then error() end

  table.insert(self.sources, src)
  return self
end

function builder:setEntryPoint(out)
  self.entry = out
  return self
end
function builder:setExecutable(out)
  self.output = out
  return self
end

function builder:run()
  local out = ExecutableWriter:new()
  if self.sources then
    for k, v in pairs(self.sources) do
      out:addPreloadFunction(loadfile(v))
    end
  end

  if not self.entry then
    printError('no entry point')
    return
  end

  out:addMainFunction(self.entry)

  if not self.output then
    printError('no output')
    return
  end

  out:write(self.output)
end

function bs_env.builder()
  local ret = {
    ["sources"] = {}
  }
  setmetatable(ret, builder)
  table.insert(bs_env.builders, ret)
  return ret
end


local function doBs(file)
  local fn, err = loadfile(file)
  if not fn then
    printError(('Failed to load build script [%s] because of [%s].'):format(file, err))
    error()
  end

  setfenv(fn, bs_env)
  fn()

  for k, v in pairs(bs_env.builders) do
    v:run()
  end
end

local tArgs = {...}

doBs(tostring(tArgs[1]))
