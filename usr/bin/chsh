--[[
The MIT License (MIT)

Copyright (c) 2014-2015 the TARDIX team


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
]]
local program = program

if not program then
  if require then
    program = require 'libprog'
  else
    program = loadfile('/usr/lib/libprog.lua')()
  end

  if not program then
    error('Failed to load program.', 2)
  end
end

local libchsh = (function()

local chsh = {}
if not _G.env then
  _G.env = {dir = '/', path = {'/usr/bin', '/bin', '/usr/sbin', '/rom/programs'}}
  do
    if term.isColor and term.isColor() then
      table.insert(_G.env.path, '/rom/programs/advanced')
    end
    if turtle then
    	table.insert(_G.env.path, "/rom/programs/turtle")
    else
        table.insert(_G.env.path, "/rom/programs/rednet")
        table.insert(_G.env.path, "/rom/programs/fun")
        if term.isColor() then
        	table.insert(_G.env.path, "/rom/programs/fun/advanced")
        end
    end
    if pocket then
        table.insert(_G.env.path, "/rom/programs/pocket")
    end
    if commands then
        table.insert(_G.env.path, "/rom/programs/command")
    end
  end
end


function chsh.resolve(path)
  for k, v in pairs(_G.env.path) do
    if fs.exists(fs.combine(v, path)) then
      return fs.combine(v, path)
    end
  end

  return false, 'no programs found'
end

function chsh.run(path, ...)
  local ret, err = tostring(chsh.resolve(path))

  if not fs.exists(ret) then
    printError('No such program ' .. exloc)
    return
  end

  return exec(ret, ...)
end

function chsh.setDir(dir)
  _G.env.dir = dir
end

function chsh.getDir()
  return _G.env.dir
end

function chsh.changeDir(dir)
  if fs.exists(fs.combine(_G.env.dir, dir)) and fs.isDir(fs.combine(_G.env.dir, dir)) then
    _G.env.dir = fs.combine(_G.env.dir, dir)
    return true
  else
    error('Can not change directory to an unexistant directory or to a file. ', 2)
    return false
  end
end

function chsh.prompt()
  return (_G.env.dir) .. ' $ '
end

return chsh
end)()

if not process.this then
  process.this = (getfenv(2).process.this and getfenv(2).process.this or process.main):spawnSubprocess(_FILE and _FILE or '/usr/bin/chsh')
end


local json = require 'libjson'

local function loadCfg(file)
  local x = fs.open(file, 'r')
  local data = json:decode(x.readAll())
  x.close()

  return data
end

local function writeCfg(file, cfg)
  local x = fs.open(file, 'w')
  x.writeLine(json:encode(cfg))
  x.close()
end

local function mainfnc()
  local inp = (""):lower()

  repeat
    io.write(libchsh.prompt())
    inp = read():lower():split(' ')
    if #inp == 1 then
      io.write(libchsh.prompt())
      inp = read():lower():split(' ')
    else
      libchsh.run(unpack(inp))
    end
  until inp == 'exit'
end

do
  mainfnc()
end
