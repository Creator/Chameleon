--[[
The MIT License (MIT)

Copyright (c) 2014-2015 the TARDIX team


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Switchd, for libnet. (fork of netd)

Author: Jared Allard <rainbowdashdc@pony.so>
]]

local libp = require("libprog")
local libnet = _G.libnet

libp.daemonize()
	:addEvent('init', function()
    if libnet:registerInterface() == false then
			logn.write("netd disabled, no interfaces")
		else
    	logn.write("libnet started (netd)")
		end
	end)
	:addEvent('peripheral', function(ev, sid)
		local dev = peripheral.getType(sid)

		-- check if the new device was a modem or not.
		if dev == "modem" then
			libnet:registerInterface(sid)
		end
	end)
	:addEvent('peripheral_detach', function(ev, sid)
		local dev = peripheral.getType(sid)

		-- hack to determine if it's a modem or not
		if fs.exists("/usr/dev/mod-"..sid) then
			fs.delete("/usr/dev/mod-"..sid)
			libnet.deregisterInterface(sid)
		end
	end)
	:addEvent('rednet_message', function(ev, sid, msg)
    logn.write("netd => libnet:receive (event)")
    libnet.handoff(libnet, sid, msg)
	end)
	:addEvent('cleanup', function()
    logn.write("libnet stopped")
	end)
	:run(...)
