--[[
The MIT License (MIT)

Copyright (c) 2014-2015 the TARDIX team


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
]]

term.clear()
term.setCursorPos(1,1)

logf('Starting sysw-intree from %s', _FILE or 'not executed with exec... :M')
local _sysw_dir = fs.getDir(_FILE or '/')

local cfg = {}

do
  -- parse config file
  if fs.exists('/usr/etc/sysw.conf') then
    cfg = textutils.unserialize(readfile('/usr/etc/sysw.conf'))
  else
    logf('[sysw-intree] failed to load config; can not proceed.')
    error()
  end
end

local fromDir = {}

do
  if fs.exists('/usr/etc/sysw.d') then
    if fs.isDir('/usr/etc/sysw.d') then
      for k, v in pairs(listAll('/usr/etc/sysw.d')) do
        if not fs.isDir(v) then
          table.insert(fromDir, textutils.unserialize(readfile(v)))
        end
      end
    else
      logf('Found sysw.d.. but it\'s a file?')
    end
  end

  do
    --unify
    for k, v in pairs(fromDir) do
      table.dump(v)
      for k1, v1 in pairs(v) do
        table.dump(v1)
        if not cfg[k1] then cfg[k1] = {} end
        if type(v1) == 'table' then
          for k2, v2 in pairs(v1) do
            cfg[k1][k2] = v2
          end
        else
          cfg[k1] = v1
        end
      end
    end
  end
end
local initThread;

if not process.this then
  process.this = process.main:spawnSubprocess('/usr/sbin/init')
end

if cfg and cfg.initProgram then
  initThread = process.this:spawnThread(loadfile(cfg['initProgram']), 'mainProgram')
else
  initThread = process.this:spawnThread(loadfile('/rom/programs/lua'), 'mainProgram')
end
initThread:update()

local handlers = {};

do
  for k, v in pairs(cfg) do
    if v.event then
      if handlers and handlers[v.event] then
        table.insert(handlers[v.event], v)
      else
        handlers[v.event] = {
          v
        }
      end
    elseif v.events then
      for e, d in pairs(v.events) do
        if handlers and handlers[d] then
          table.insert(handlers[d], v)
        else
          handlers[d] = {
            v
          }
        end
      end
    end
  end
end

local syswHandler = process.this:spawnThread(function()
  while true do
    local ok, err =  pcall(function() local data = {coroutine.yield()}
    if handlers[data[1]] then
      for k, v in pairs(handlers[data[1]]) do
        if v.handlerFunc then
          pcall(v.handlerFunc, unpack(data))
        elseif v.handler then
          sexec(v.handler, unpack(data))
        elseif v.handlers then
          for e, d in pairs(v.handlers) do
            sexec(d, unpack(data))
          end
        end
      end
    end end)

    if not ok then
      print(err)
    end
  end
end, 'sysw-handler')

_G.sysw = {}

function sysw.exit()
  coroutine.fire('sysw', 'reboot')
end

function sysw.registerHandler(event, handlerFunc)
  table.insert(cfg, {
    ["event"] = event,
    ["handlerFunc"] = handlerFunc
  })
end

function sysw.patch()
  dofile(fs.combine(_G.params.root, '/lib/libk.lua'))
  modules.reloadAllModules()
end

process.this:update()
process.this:update('init')

while true do
  local data = {coroutine.yield()}
  if data[1] == 'terminate' then
    error()
  end
  local ret = process.this:update(unpack(data))
end
