logf('Starting sysw-intree from %s', _FILE or 'not executed with execl... :M')
local _sysw_dir = fs.getDir(_FILE or '/')

local cfg = {}

do
  -- parse config file
  if fs.exists('/usr/etc/sysw.conf') then
    cfg = textutils.unserialize(readfile('/usr/etc/sysw.conf'))
  else
    logf('[sysw-intree] failed to load config; can not proceed.')
    error()
  end
end

local fromDir = {}

do
  if fs.exists('/usr/etc/sysw.d') then
    if fs.isDir('/usr/etc/sysw.d') then
      for k, v in pairs(listAll('/usr/etc/sysw.d')) do
        if not fs.isDir(v) then
          table.insert(fromDir, textutils.unserialize(readfile(v)))
        end
      end
    else
      logf('Found sysw.d.. but it\'s a file?')
    end
  end

  do
    --unify
    for k, v in pairs(fromDir) do
      table.dump(v)
      for k1, v1 in pairs(v) do
        table.dump(v1)
        if not cfg[k1] then cfg[k1] = {} end
        if type(v1) == 'table' then
          for k2, v2 in pairs(v1) do
            cfg[k1][k2] = v2
          end
        else
          cfg[k1] = v1
        end
      end
    end
  end
end
local initThread;

if cfg['initProgram'] then
  initThread = process.this:spawnThread(loadfile(cfg['initprogram']), 'mainProgram')
else
  initThread = process.this:spawnThread(loadfile('/rom/programs/lua'), 'mainProgram')
end
initThread:update()

local syswHandler = process.this:spawnThread(function()
  while true do
    local data = {coroutine.yield()}
    if data[1] == 'sysw' then
      if data[2] then
        for k, v in pairs(cfg) do
          if v.event and v.event == data[2] then
            if v.handlerFunc then
              v.handlerFunc(table.from(data,1))
            else
              loadfile(v.handler)(table.from(data,1))
            end
          end
        end
      end
    elseif data[1] == 'fail' then
      logf('O my, %s failed! (sysw-errors)', data[2])
    else
      coroutine.fire('sysw', unpack(table.from(data,1)))
    end
  end
end, 'sysw-handler')
_G.sysw = {}

function sysw.exit()
  coroutine.fire('sysw', 'reboot')
end

function sysw.registerHandler(event, handlerFunc)
  table.insert(cfg, {
    ["event"] = event,
    ["handlerFunc"] = handlerFunc
  })
end

function sysw.patch()
  dofile(fs.combine(_G.params.root, '/lib/libk.lua'))
  modules.reloadAllModules()
end

sysw.registerHandler('start-shell', function()
  error()
end)

process.this:update()
process.this:update('sysw','init')

while true do
  local data = {coroutine.yield()}
  if data[1] == 'terminate' then
    error()
  end
  local ret = process.this:update(unpack(data))
end
